-- A DUT entity is used to wrap your design.
--  This example shows how you can do this for the
--  Full-adder.

library ieee;
use ieee.std_logic_1164.all;
entity DUT is
   port(input_vector: in std_logic_vector(8 downto 0);
       	output_vector: out std_logic_vector(4 downto 0));
end entity;

architecture DutWrap of DUT is
   component four_bit_adder_subtractor is
     port(A_3,A_2,A_1,A_0, B_3,B_2,B_1,B_0, M: in std_logic; S_3,S_2,S_1,S_0, Cout: out std_logic);
   end component;
begin

   -- input/output vector element ordering is critical,
   -- and must match the ordering in the trace file!
   add_instance: four_bit_adder_subtractor 
			port map (
					-- order of inputs 
					A_3 => input_vector(8),
					A_2 => input_vector(7),
					A_1 => input_vector(6),
					A_0 => input_vector(5),
					B_3 => input_vector(4),
					B_2 => input_vector(3),
					B_1 => input_vector(2),
					B_0 => input_vector(1),
					M   => input_vector(0),
					
                                        -- order of outputs S Cout
					S_3 => output_vector(3),
					S_2 => output_vector(2),
					S_1 => output_vector(1),
					S_0 => output_vector(0),
					Cout => output_vector(4));

end DutWrap;

